/*
 * This file is generated by jOOQ.
 */
package org.jease.entity;


import org.jease.entity.tables.*;
import org.jease.entity.tables.records.*;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import javax.annotation.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>jease</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ContentRecord, Integer> IDENTITY_CONTENT = Identities0.IDENTITY_CONTENT;
    public static final Identity<LinkcheckRecord, Integer> IDENTITY_LINKCHECK = Identities0.IDENTITY_LINKCHECK;
    public static final Identity<ParameterRecord, Integer> IDENTITY_PARAMETER = Identities0.IDENTITY_PARAMETER;
    public static final Identity<RedirectRecord, Integer> IDENTITY_REDIRECT = Identities0.IDENTITY_REDIRECT;
    public static final Identity<RoleRecord, Integer> IDENTITY_ROLE = Identities0.IDENTITY_ROLE;
    public static final Identity<SequenceRecord, Integer> IDENTITY_SEQUENCE = Identities0.IDENTITY_SEQUENCE;
    public static final Identity<UsersRecord, Integer> IDENTITY_USERS = Identities0.IDENTITY_USERS;
    public static final Identity<VersionRecord, Integer> IDENTITY_VERSION = Identities0.IDENTITY_VERSION;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ContentRecord> KEY_CONTENT_PRIMARY = UniqueKeys0.KEY_CONTENT_PRIMARY;
    public static final UniqueKey<LinkcheckRecord> KEY_LINKCHECK_PRIMARY = UniqueKeys0.KEY_LINKCHECK_PRIMARY;
    public static final UniqueKey<ParameterRecord> KEY_PARAMETER_PRIMARY = UniqueKeys0.KEY_PARAMETER_PRIMARY;
    public static final UniqueKey<RedirectRecord> KEY_REDIRECT_PRIMARY = UniqueKeys0.KEY_REDIRECT_PRIMARY;
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = UniqueKeys0.KEY_ROLE_PRIMARY;
    public static final UniqueKey<SequenceRecord> KEY_SEQUENCE_PRIMARY = UniqueKeys0.KEY_SEQUENCE_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
    public static final UniqueKey<VersionRecord> KEY_VERSION_PRIMARY = UniqueKeys0.KEY_VERSION_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ContentRecord, Integer> IDENTITY_CONTENT = Internal.createIdentity(Content.CONTENT, Content.CONTENT.ID);
        public static Identity<LinkcheckRecord, Integer> IDENTITY_LINKCHECK = Internal.createIdentity(Linkcheck.LINKCHECK, Linkcheck.LINKCHECK.ID);
        public static Identity<ParameterRecord, Integer> IDENTITY_PARAMETER = Internal.createIdentity(Parameter.PARAMETER, Parameter.PARAMETER.ID);
        public static Identity<RedirectRecord, Integer> IDENTITY_REDIRECT = Internal.createIdentity(Redirect.REDIRECT, Redirect.REDIRECT.ID);
        public static Identity<RoleRecord, Integer> IDENTITY_ROLE = Internal.createIdentity(Role.ROLE, Role.ROLE.ID);
        public static Identity<SequenceRecord, Integer> IDENTITY_SEQUENCE = Internal.createIdentity(Sequence.SEQUENCE, Sequence.SEQUENCE.ID);
        public static Identity<UsersRecord, Integer> IDENTITY_USERS = Internal.createIdentity(Users.USERS, Users.USERS.ID);
        public static Identity<VersionRecord, Integer> IDENTITY_VERSION = Internal.createIdentity(Version.VERSION, Version.VERSION.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ContentRecord> KEY_CONTENT_PRIMARY = Internal.createUniqueKey(Content.CONTENT, "KEY_content_PRIMARY", Content.CONTENT.ID);
        public static final UniqueKey<LinkcheckRecord> KEY_LINKCHECK_PRIMARY = Internal.createUniqueKey(Linkcheck.LINKCHECK, "KEY_linkcheck_PRIMARY", Linkcheck.LINKCHECK.ID);
        public static final UniqueKey<ParameterRecord> KEY_PARAMETER_PRIMARY = Internal.createUniqueKey(Parameter.PARAMETER, "KEY_parameter_PRIMARY", Parameter.PARAMETER.ID);
        public static final UniqueKey<RedirectRecord> KEY_REDIRECT_PRIMARY = Internal.createUniqueKey(Redirect.REDIRECT, "KEY_redirect_PRIMARY", Redirect.REDIRECT.ID);
        public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, "KEY_role_PRIMARY", Role.ROLE.ID);
        public static final UniqueKey<SequenceRecord> KEY_SEQUENCE_PRIMARY = Internal.createUniqueKey(Sequence.SEQUENCE, "KEY_sequence_PRIMARY", Sequence.SEQUENCE.ID);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, "KEY_users_PRIMARY", Users.USERS.ID);
        public static final UniqueKey<VersionRecord> KEY_VERSION_PRIMARY = Internal.createUniqueKey(Version.VERSION, "KEY_version_PRIMARY", Version.VERSION.ID);
    }
}
