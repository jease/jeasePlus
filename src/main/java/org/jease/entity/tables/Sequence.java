/*
 * This file is generated by jOOQ.
 */
package org.jease.entity.tables;


import org.jease.entity.Indexes;
import org.jease.entity.Jease;
import org.jease.entity.Keys;
import org.jease.entity.tables.records.SequenceRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sequence extends TableImpl<SequenceRecord> {

    private static final long serialVersionUID = -1833390681;

    /**
     * The reference instance of <code>jease.sequence</code>
     */
    public static final Sequence SEQUENCE = new Sequence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SequenceRecord> getRecordType() {
        return SequenceRecord.class;
    }

    /**
     * The column <code>jease.sequence.id</code>.
     */
    public final TableField<SequenceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jease.sequence.name</code>.
     */
    public final TableField<SequenceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jease.sequence.value</code>.
     */
    public final TableField<SequenceRecord, Integer> VALUE = createField("value", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>jease.sequence</code> table reference
     */
    public Sequence() {
        this(DSL.name("sequence"), null);
    }

    /**
     * Create an aliased <code>jease.sequence</code> table reference
     */
    public Sequence(String alias) {
        this(DSL.name(alias), SEQUENCE);
    }

    /**
     * Create an aliased <code>jease.sequence</code> table reference
     */
    public Sequence(Name alias) {
        this(alias, SEQUENCE);
    }

    private Sequence(Name alias, Table<SequenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sequence(Name alias, Table<SequenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sequence(Table<O> child, ForeignKey<O, SequenceRecord> key) {
        super(child, key, SEQUENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jease.JEASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEQUENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SequenceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SEQUENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SequenceRecord> getPrimaryKey() {
        return Keys.KEY_SEQUENCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SequenceRecord>> getKeys() {
        return Arrays.<UniqueKey<SequenceRecord>>asList(Keys.KEY_SEQUENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sequence as(String alias) {
        return new Sequence(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sequence as(Name alias) {
        return new Sequence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sequence rename(String name) {
        return new Sequence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sequence rename(Name name) {
        return new Sequence(name, null);
    }
}
